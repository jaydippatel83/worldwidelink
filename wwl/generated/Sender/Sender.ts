// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class MessageReceived extends ethereum.Event {
  get params(): MessageReceived__Params {
    return new MessageReceived__Params(this);
  }
}

export class MessageReceived__Params {
  _event: MessageReceived;

  constructor(event: MessageReceived) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get borrower(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenAmount(): MessageReceivedTokenAmountStruct {
    return changetype<MessageReceivedTokenAmountStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class MessageReceivedTokenAmountStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class MessageSent extends ethereum.Event {
  get params(): MessageSent__Params {
    return new MessageSent__Params(this);
  }
}

export class MessageSent__Params {
  _event: MessageSent;

  constructor(event: MessageSent) {
    this._event = event;
  }

  get messageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get destinationChainSelector(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get depositor(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get tokenAmount(): MessageSentTokenAmountStruct {
    return changetype<MessageSentTokenAmountStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }

  get fees(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class MessageSentTokenAmountStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class OwnershipTransferRequested extends ethereum.Event {
  get params(): OwnershipTransferRequested__Params {
    return new OwnershipTransferRequested__Params(this);
  }
}

export class OwnershipTransferRequested__Params {
  _event: OwnershipTransferRequested;

  constructor(event: OwnershipTransferRequested) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Sender__depositsResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getLocked(): boolean {
    return this.value1;
  }
}

export class Sender__getLastReceivedMessageDetailsResult {
  value0: Bytes;
  value1: BigInt;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: BigInt;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getMessageId(): Bytes {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): Address {
    return this.value2;
  }

  getValue3(): Address {
    return this.value3;
  }

  getValue4(): Address {
    return this.value4;
  }

  getValue5(): BigInt {
    return this.value5;
  }
}

export class Sender__getSendFeesResultMessageStruct extends ethereum.Tuple {
  get receiver(): Bytes {
    return this[0].toBytes();
  }

  get data(): Bytes {
    return this[1].toBytes();
  }

  get tokenAmounts(): Array<
    Sender__getSendFeesResultMessageTokenAmountsStruct
  > {
    return this[2].toTupleArray<
      Sender__getSendFeesResultMessageTokenAmountsStruct
    >();
  }

  get feeToken(): Address {
    return this[3].toAddress();
  }

  get extraArgs(): Bytes {
    return this[4].toBytes();
  }
}

export class Sender__getSendFeesResultMessageTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class Sender__getSendFeesResult {
  value0: BigInt;
  value1: Sender__getSendFeesResultMessageStruct;

  constructor(value0: BigInt, value1: Sender__getSendFeesResultMessageStruct) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getFees(): BigInt {
    return this.value0;
  }

  getMessage(): Sender__getSendFeesResultMessageStruct {
    return this.value1;
  }
}

export class Sender__messageDetailResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getSourceChainSelector(): BigInt {
    return this.value0;
  }

  getSender(): Address {
    return this.value1;
  }

  getBorrower(): Address {
    return this.value2;
  }

  getToken(): Address {
    return this.value3;
  }

  getAmount(): BigInt {
    return this.value4;
  }
}

export class Sender extends ethereum.SmartContract {
  static bind(address: Address): Sender {
    return new Sender("Sender", address);
  }

  deposits(param0: Address): Sender__depositsResult {
    let result = super.call("deposits", "deposits(address):(uint256,bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Sender__depositsResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_deposits(param0: Address): ethereum.CallResult<Sender__depositsResult> {
    let result = super.tryCall("deposits", "deposits(address):(uint256,bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Sender__depositsResult(value[0].toBigInt(), value[1].toBoolean())
    );
  }

  getLastReceivedMessageDetails(): Sender__getLastReceivedMessageDetailsResult {
    let result = super.call(
      "getLastReceivedMessageDetails",
      "getLastReceivedMessageDetails():(bytes32,uint64,address,address,address,uint256)",
      []
    );

    return new Sender__getLastReceivedMessageDetailsResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt()
    );
  }

  try_getLastReceivedMessageDetails(): ethereum.CallResult<
    Sender__getLastReceivedMessageDetailsResult
  > {
    let result = super.tryCall(
      "getLastReceivedMessageDetails",
      "getLastReceivedMessageDetails():(bytes32,uint64,address,address,address,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Sender__getLastReceivedMessageDetailsResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt()
      )
    );
  }

  getNumberOfReceivedMessages(): BigInt {
    let result = super.call(
      "getNumberOfReceivedMessages",
      "getNumberOfReceivedMessages():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfReceivedMessages(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfReceivedMessages",
      "getNumberOfReceivedMessages():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRouter(): Address {
    let result = super.call("getRouter", "getRouter():(address)", []);

    return result[0].toAddress();
  }

  try_getRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("getRouter", "getRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSendFees(
    destinationChainSelector: BigInt,
    receiver: Address
  ): Sender__getSendFeesResult {
    let result = super.call(
      "getSendFees",
      "getSendFees(uint64,address):(uint256,(bytes,bytes,(address,uint256)[],address,bytes))",
      [
        ethereum.Value.fromUnsignedBigInt(destinationChainSelector),
        ethereum.Value.fromAddress(receiver)
      ]
    );

    return new Sender__getSendFeesResult(
      result[0].toBigInt(),
      changetype<Sender__getSendFeesResultMessageStruct>(result[1].toTuple())
    );
  }

  try_getSendFees(
    destinationChainSelector: BigInt,
    receiver: Address
  ): ethereum.CallResult<Sender__getSendFeesResult> {
    let result = super.tryCall(
      "getSendFees",
      "getSendFees(uint64,address):(uint256,(bytes,bytes,(address,uint256)[],address,bytes))",
      [
        ethereum.Value.fromUnsignedBigInt(destinationChainSelector),
        ethereum.Value.fromAddress(receiver)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Sender__getSendFeesResult(
        value[0].toBigInt(),
        changetype<Sender__getSendFeesResultMessageStruct>(value[1].toTuple())
      )
    );
  }

  isChainSupported(destChainSelector: BigInt): boolean {
    let result = super.call(
      "isChainSupported",
      "isChainSupported(uint64):(bool)",
      [ethereum.Value.fromUnsignedBigInt(destChainSelector)]
    );

    return result[0].toBoolean();
  }

  try_isChainSupported(
    destChainSelector: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isChainSupported",
      "isChainSupported(uint64):(bool)",
      [ethereum.Value.fromUnsignedBigInt(destChainSelector)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  messageDetail(param0: Bytes): Sender__messageDetailResult {
    let result = super.call(
      "messageDetail",
      "messageDetail(bytes32):(uint64,address,address,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Sender__messageDetailResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt()
    );
  }

  try_messageDetail(
    param0: Bytes
  ): ethereum.CallResult<Sender__messageDetailResult> {
    let result = super.tryCall(
      "messageDetail",
      "messageDetail(bytes32):(uint64,address,address,address,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Sender__messageDetailResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  receivedMessages(param0: BigInt): Bytes {
    let result = super.call(
      "receivedMessages",
      "receivedMessages(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_receivedMessages(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "receivedMessages",
      "receivedMessages(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  sendMessage(
    destinationChainSelector: BigInt,
    receiver: Address,
    tokenToTransfer: Address,
    transferAmount: BigInt
  ): Bytes {
    let result = super.call(
      "sendMessage",
      "sendMessage(uint64,address,address,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(destinationChainSelector),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(tokenToTransfer),
        ethereum.Value.fromUnsignedBigInt(transferAmount)
      ]
    );

    return result[0].toBytes();
  }

  try_sendMessage(
    destinationChainSelector: BigInt,
    receiver: Address,
    tokenToTransfer: Address,
    transferAmount: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "sendMessage",
      "sendMessage(uint64,address,address,uint256):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(destinationChainSelector),
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromAddress(tokenToTransfer),
        ethereum.Value.fromUnsignedBigInt(transferAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _router(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get link(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class CcipReceiveCall extends ethereum.Call {
  get inputs(): CcipReceiveCall__Inputs {
    return new CcipReceiveCall__Inputs(this);
  }

  get outputs(): CcipReceiveCall__Outputs {
    return new CcipReceiveCall__Outputs(this);
  }
}

export class CcipReceiveCall__Inputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }

  get message(): CcipReceiveCallMessageStruct {
    return changetype<CcipReceiveCallMessageStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CcipReceiveCall__Outputs {
  _call: CcipReceiveCall;

  constructor(call: CcipReceiveCall) {
    this._call = call;
  }
}

export class CcipReceiveCallMessageStruct extends ethereum.Tuple {
  get messageId(): Bytes {
    return this[0].toBytes();
  }

  get sourceChainSelector(): BigInt {
    return this[1].toBigInt();
  }

  get sender(): Bytes {
    return this[2].toBytes();
  }

  get data(): Bytes {
    return this[3].toBytes();
  }

  get destTokenAmounts(): Array<CcipReceiveCallMessageDestTokenAmountsStruct> {
    return this[4].toTupleArray<CcipReceiveCallMessageDestTokenAmountsStruct>();
  }
}

export class CcipReceiveCallMessageDestTokenAmountsStruct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get amount(): BigInt {
    return this[1].toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class SendMessageCall extends ethereum.Call {
  get inputs(): SendMessageCall__Inputs {
    return new SendMessageCall__Inputs(this);
  }

  get outputs(): SendMessageCall__Outputs {
    return new SendMessageCall__Outputs(this);
  }
}

export class SendMessageCall__Inputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }

  get destinationChainSelector(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenToTransfer(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get transferAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SendMessageCall__Outputs {
  _call: SendMessageCall;

  constructor(call: SendMessageCall) {
    this._call = call;
  }

  get messageId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
